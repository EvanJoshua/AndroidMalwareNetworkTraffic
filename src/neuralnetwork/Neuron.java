/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package neuralnetwork;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.stream.IntStream;
import neuralnetwork.Layer.LayerType;

/**
 *
 * @author asus
 */
public class Neuron {

    private double[] weights = null;
    private int target = 0;
    private double oIN = 0;

    public int getTarget() {
        return target;
    }

    public void setTarget(int target) {
        this.target = target;
    }

    public double getoIN() {
        return oIN;
    }

    public void setoIN(double oIN) {
        this.oIN = oIN;
    }

    public double getoOUT() {
        return oOUT;
    }

    public void setoOUT(double oOUT) {
        this.oOUT = oOUT;
    }

    public LayerType getLayerType() {
        return layerType;
    }

    public void setLayerType(LayerType layerType) {
        this.layerType = layerType;
    }
    private double oOUT = 0;
    private double derivativeSoftmax = 0;
    private double derivativeCrossEntropy = 0;
    private Layer.LayerType layerType = null;

    public Neuron(Layer.LayerType layerType, int numbOfWeights, int index) throws FileNotFoundException, IOException {
        BufferedReader bufferedReader;
        this.layerType = layerType;
        if (layerType != LayerType.I) {
            weights = new double[numbOfWeights];
            String line;
            String file = "weight_input_hidden_" + (index + 1) + ".txt";
            if (layerType == LayerType.H) {
                bufferedReader = new BufferedReader(new FileReader(file));
                for (int i = 0; i < numbOfWeights; i++) {
                    line = bufferedReader.readLine();
                    weights[i] = Double.parseDouble(line);
                }
            } else {
                file = "weight_hidden_output_" + (index + 1) + ".txt";
                bufferedReader = new BufferedReader(new FileReader(file));
                for (int i = 0; i < numbOfWeights; i++) {
                    line = bufferedReader.readLine();
                    weights[i] = Double.parseDouble(line);
                }
            }
        }
    }

    public void sigmoidFunction(double sumOfWeights) {
        oIN = sumOfWeights;
        oOUT = 1.0 / (1 + Math.exp(-1.0 * sumOfWeights));
    }

    public void softmaxFunction(int index, double arraySumOfWeights[]) {
        double penyebut = 0;
        double pembilang = 0;
        pembilang = Math.exp(arraySumOfWeights[index]);
        for (int i = 0; i < arraySumOfWeights.length; i++) {
            penyebut += Math.exp(arraySumOfWeights[i]);
        }
        oIN = arraySumOfWeights[index];
        oOUT = pembilang / penyebut;
    }

    public double[] getWeights() {
        return weights;
    }

    public void setWeights(double weights[]) {
        this.weights = weights;
    }

    public double getOOUT() {
        return oOUT;
    }

    public double getOIN() {
        return oIN;
    }

    public void setOOUT(double output) {
        this.oOUT = output;
    }

    public void setOIN(double output) {
        this.oIN = output;
    }

    public double getDerivativeSoftmax() {
        return derivativeSoftmax;
    }

    public void setDerivativeSoftmax(double derivativeSoftmax) {
        this.derivativeSoftmax = derivativeSoftmax;
    }

    public double getDerivativeCrossEntropy() {
        return derivativeCrossEntropy;
    }

    public void setDerivativeCrossEntropy(double derivativeCrossEntropy) {
        this.derivativeCrossEntropy = derivativeCrossEntropy;
    }
}
