/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package neuralnetwork;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.IntStream;

/**
 *
 * @author asus
 */
//
public class Layer {

    static enum LayerType {
        I, H, O
    };
    private Neuron[] neurons = null;
    private LayerType layerType;

    public Layer(NeuralNetwork neuralNetwork, LayerType layerType) throws FileNotFoundException, IOException {
        this.layerType = layerType;
        switch (layerType) {
            case I:
                neurons = new Neuron[NeuralNetwork.NUMB_OF_INPUT_NEURONS];
                IntStream.range(0, NeuralNetwork.NUMB_OF_INPUT_NEURONS).forEach(i -> {
                    try {
                        neurons[i] = new Neuron(layerType, 0, 0);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Layer.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Layer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
                break;
            case H:
                neurons = new Neuron[neuralNetwork.getNumbOfHiddenNeurons()];
                IntStream.range(0, neuralNetwork.getNumbOfHiddenNeurons()).forEach(i -> {
                    try {
                        neurons[i] = new Neuron(layerType, NeuralNetwork.NUMB_OF_INPUT_NEURONS, i);
                    } catch (IOException ex) {
                        Logger.getLogger(Layer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
                break;
            case O:
                neurons = new Neuron[NeuralNetwork.NUMB_OF_OUTPUT_NEURONS];
                IntStream.range(0, NeuralNetwork.NUMB_OF_OUTPUT_NEURONS).forEach(i -> {
                    try {
                        neurons[i] = new Neuron(layerType, neuralNetwork.getNumbOfHiddenNeurons(), i);
                    } catch (IOException ex) {
                        Logger.getLogger(Layer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
                break;
            default:
                break;
        }
    }

    public void setNeurons(Neuron[] neurons) {
        this.neurons = neurons;
    }

    public void setLayerType(LayerType layerType) {
        this.layerType = layerType;
    }

    public Neuron[] getNeurons() {
        return neurons;
    }

    public LayerType getLayerType() {
        return layerType;
    }
}
