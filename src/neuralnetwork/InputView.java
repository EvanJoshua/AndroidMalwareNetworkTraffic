/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package neuralnetwork;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import static neuralnetwork.Driver.learningRate;
import static neuralnetwork.Driver.maxValueOfFeatures;

/**
 *
 * @author asus
 */
public class InputView extends javax.swing.JFrame {

    /**
     * Creates new form InputView
     */
    static Driver driver = new Driver();

    public InputView() {
        super("Malware Analysts");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        All = new javax.swing.JRadioButton();
        sourcePort = new javax.swing.JCheckBox();
        meanOfNumberOfBytesPerPacket = new javax.swing.JCheckBox();
        destinationPort = new javax.swing.JCheckBox();
        protocol = new javax.swing.JCheckBox();
        totalNumberOfBytes = new javax.swing.JCheckBox();
        totalNumberOfPackets = new javax.swing.JCheckBox();
        stdOfNumberOfBytesPerPacket = new javax.swing.JCheckBox();
        numberOfBytesPerSecond = new javax.swing.JCheckBox();
        numberOfPacketsPerSecond = new javax.swing.JCheckBox();
        ratioOfIATOI = new javax.swing.JCheckBox();
        ratioOfNumberOfBytesOI = new javax.swing.JCheckBox();
        stdOfIAT = new javax.swing.JCheckBox();
        meanOfIAT = new javax.swing.JCheckBox();
        flowDuration = new javax.swing.JCheckBox();
        ratioOfNumberOfPacketsOI = new javax.swing.JCheckBox();
        forwardIATStd = new javax.swing.JCheckBox();
        backwardPacketsPerSecond = new javax.swing.JCheckBox();
        packetLengthVariance = new javax.swing.JCheckBox();
        finFlagCount = new javax.swing.JCheckBox();
        totalLengthOfBackwardPackets = new javax.swing.JCheckBox();
        totalBackwardPackets = new javax.swing.JCheckBox();
        maxPacketLength = new javax.swing.JCheckBox();
        backwardIATStd = new javax.swing.JCheckBox();
        forwardPacketLengthMax = new javax.swing.JCheckBox();
        totalForwardPackets = new javax.swing.JCheckBox();
        forwardPacketsPerSecond = new javax.swing.JCheckBox();
        activeMean = new javax.swing.JCheckBox();
        train = new javax.swing.JButton();
        test = new javax.swing.JButton();
        fiturLiteratur = new javax.swing.JLabel();
        fiturPeneliti = new javax.swing.JLabel();
        hiddenNeurons = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        learningRate = new javax.swing.JTextField();
        literatur = new javax.swing.JRadioButton();
        packetBased = new javax.swing.JRadioButton();
        byteBased = new javax.swing.JRadioButton();
        timeBased = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        flowBased = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fileTrain = new javax.swing.JButton();
        labelPath = new javax.swing.JLabel();
        labelTesting = new javax.swing.JLabel();
        fileTesting = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        testPath = new javax.swing.JLabel();
        trainPath = new javax.swing.JLabel();
        labelEpoch = new javax.swing.JLabel();
        epoch = new javax.swing.JTextField();
        staticBased = new javax.swing.JRadioButton();
        peneliti = new javax.swing.JRadioButton();
        labelFolderName = new javax.swing.JLabel();
        folderName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        All.setText("79 Fitur");
        All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllActionPerformed(evt);
            }
        });

        sourcePort.setText("Source Port");

        meanOfNumberOfBytesPerPacket.setText("Mean of number of Bytes per packet");
        meanOfNumberOfBytesPerPacket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanOfNumberOfBytesPerPacketActionPerformed(evt);
            }
        });

        destinationPort.setText("Destination Port");

        protocol.setText("L3/L4 ");

        totalNumberOfBytes.setText("Total Number of Bytes");
        totalNumberOfBytes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalNumberOfBytesActionPerformed(evt);
            }
        });

        totalNumberOfPackets.setText("Total Number of Packets");

        stdOfNumberOfBytesPerPacket.setText("Std of number of Bytes per packet");
        stdOfNumberOfBytesPerPacket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stdOfNumberOfBytesPerPacketActionPerformed(evt);
            }
        });

        numberOfBytesPerSecond.setText("Number of Bytes per second");
        numberOfBytesPerSecond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfBytesPerSecondActionPerformed(evt);
            }
        });

        numberOfPacketsPerSecond.setText("Number of packets per second");
        numberOfPacketsPerSecond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfPacketsPerSecondActionPerformed(evt);
            }
        });

        ratioOfIATOI.setText("Ratio of IAT OUT/IN");
        ratioOfIATOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratioOfIATOIActionPerformed(evt);
            }
        });

        ratioOfNumberOfBytesOI.setText("Ratio of number of Bytes OUT/IN");
        ratioOfNumberOfBytesOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratioOfNumberOfBytesOIActionPerformed(evt);
            }
        });

        stdOfIAT.setText("Std of IAT");
        stdOfIAT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stdOfIATActionPerformed(evt);
            }
        });

        meanOfIAT.setText("Mean of inter-arrival time (IAT)");
        meanOfIAT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanOfIATActionPerformed(evt);
            }
        });

        flowDuration.setText("Flow duration");

        ratioOfNumberOfPacketsOI.setText("Ratio of number of packets OUT/IN ");
        ratioOfNumberOfPacketsOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratioOfNumberOfPacketsOIActionPerformed(evt);
            }
        });

        forwardIATStd.setText("Fwd IAT Std");
        forwardIATStd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardIATStdActionPerformed(evt);
            }
        });

        backwardPacketsPerSecond.setText("Bwd Packets/s");
        backwardPacketsPerSecond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardPacketsPerSecondActionPerformed(evt);
            }
        });

        packetLengthVariance.setText("Packet Length Variance");
        packetLengthVariance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packetLengthVarianceActionPerformed(evt);
            }
        });

        finFlagCount.setText("FIN Flag Count");
        finFlagCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finFlagCountActionPerformed(evt);
            }
        });

        totalLengthOfBackwardPackets.setText("Total Length of Bwd Packets");
        totalLengthOfBackwardPackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalLengthOfBackwardPacketsActionPerformed(evt);
            }
        });

        totalBackwardPackets.setText("Total Backward Packets");
        totalBackwardPackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalBackwardPacketsActionPerformed(evt);
            }
        });

        maxPacketLength.setText("Max Packet Length");

        backwardIATStd.setText("Bwd IAT Std");
        backwardIATStd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardIATStdActionPerformed(evt);
            }
        });

        forwardPacketLengthMax.setText("Fwd Packet Length Max");
        forwardPacketLengthMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardPacketLengthMaxActionPerformed(evt);
            }
        });

        totalForwardPackets.setText("Total Fwd Packets");
        totalForwardPackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalForwardPacketsActionPerformed(evt);
            }
        });

        forwardPacketsPerSecond.setText("Fwd Packets/s");

        activeMean.setText("Active Mean ");
        activeMean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeMeanActionPerformed(evt);
            }
        });

        train.setText("Train");
        train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainActionPerformed(evt);
            }
        });

        test.setText("Test");

        fiturLiteratur.setText("Fitur Literatur");

        fiturPeneliti.setText("Fitur Peneliti");

        hiddenNeurons.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        hiddenNeurons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hiddenNeuronsActionPerformed(evt);
            }
        });

        jLabel1.setText("Hidden Neurons");

        learningRate.setText("Learning Rate");
        learningRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learningRateActionPerformed(evt);
            }
        });

        literatur.setText("Literatur");
        literatur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                literaturActionPerformed(evt);
            }
        });

        packetBased.setText("Packet Based");
        packetBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packetBasedActionPerformed(evt);
            }
        });

        byteBased.setText("Byte Based");
        byteBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byteBasedActionPerformed(evt);
            }
        });

        timeBased.setText("Time Based");
        timeBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeBasedActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        flowBased.setText("Flow Based");
        flowBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flowBasedActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Parameter Neural Network");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Fitur Network Traffic");

        jLabel4.setText("Learning Rate");

        fileTrain.setText("Browse");
        fileTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTrainActionPerformed(evt);
            }
        });

        labelPath.setText("File Train");

        labelTesting.setText("File Testing");

        fileTesting.setText("Browse");
        fileTesting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTestingActionPerformed(evt);
            }
        });

        testPath.setText("Path");

        trainPath.setText("Path");

        labelEpoch.setText("Epoch");

        epoch.setText("100");
        epoch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epochActionPerformed(evt);
            }
        });

        staticBased.setText("Static Based");
        staticBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staticBasedActionPerformed(evt);
            }
        });

        peneliti.setText("Peneliti");
        peneliti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penelitiActionPerformed(evt);
            }
        });

        labelFolderName.setText("Weight Folder Name");

        folderName.setText("Folder Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(All)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(literatur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(peneliti)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byteBased)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(packetBased)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeBased))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ratioOfIATOI)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(destinationPort)
                            .addComponent(ratioOfNumberOfBytesOI)
                            .addComponent(stdOfIAT)
                            .addComponent(flowDuration)
                            .addComponent(meanOfIAT)
                            .addComponent(ratioOfNumberOfPacketsOI)
                            .addComponent(numberOfBytesPerSecond)
                            .addComponent(numberOfPacketsPerSecond)
                            .addComponent(meanOfNumberOfBytesPerPacket)
                            .addComponent(protocol)
                            .addComponent(totalNumberOfPackets)
                            .addComponent(totalNumberOfBytes)
                            .addComponent(stdOfNumberOfBytesPerPacket)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(fiturLiteratur)
                                .addComponent(sourcePort)))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(fiturPeneliti))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(forwardPacketsPerSecond)
                                    .addComponent(activeMean)
                                    .addComponent(forwardIATStd)
                                    .addComponent(finFlagCount)
                                    .addComponent(backwardIATStd)
                                    .addComponent(packetLengthVariance)
                                    .addComponent(maxPacketLength)
                                    .addComponent(totalBackwardPackets)
                                    .addComponent(totalLengthOfBackwardPackets)
                                    .addComponent(forwardPacketLengthMax)
                                    .addComponent(backwardPacketsPerSecond)
                                    .addComponent(totalForwardPackets)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(flowBased)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(staticBased)))
                .addGap(18, 24, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addGap(175, 175, 175))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(train)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(test)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPath)
                            .addComponent(labelTesting)
                            .addComponent(labelEpoch)
                            .addComponent(labelFolderName)
                            .addComponent(jLabel1))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hiddenNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fileTesting)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(testPath))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fileTrain)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(trainPath))
                            .addComponent(epoch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(learningRate, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(folderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(learningRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hiddenNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(epoch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelEpoch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fileTrain)
                            .addComponent(labelPath)
                            .addComponent(trainPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTesting)
                            .addComponent(fileTesting)
                            .addComponent(testPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelFolderName)
                            .addComponent(folderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(train)
                            .addComponent(test)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(All)
                            .addComponent(literatur)
                            .addComponent(packetBased)
                            .addComponent(timeBased)
                            .addComponent(byteBased)
                            .addComponent(peneliti))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(flowBased)
                            .addComponent(staticBased))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fiturPeneliti)
                            .addComponent(fiturLiteratur))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sourcePort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(destinationPort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(protocol)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalNumberOfPackets)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalNumberOfBytes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(meanOfNumberOfBytesPerPacket)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stdOfNumberOfBytesPerPacket)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numberOfPacketsPerSecond)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numberOfBytesPerSecond)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(flowDuration)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(meanOfIAT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stdOfIAT))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(forwardPacketsPerSecond)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalForwardPackets)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forwardPacketLengthMax)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activeMean)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(backwardPacketsPerSecond)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forwardIATStd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maxPacketLength)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalBackwardPackets)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalLengthOfBackwardPackets)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(backwardIATStd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(finFlagCount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(packetLengthVariance)))
                        .addGap(4, 4, 4)
                        .addComponent(ratioOfNumberOfPacketsOI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ratioOfNumberOfBytesOI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ratioOfIATOI)
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllActionPerformed
        boolean status = !All.isSelected();

        staticBased.setEnabled(status);
        peneliti.setEnabled(status);
        literatur.setEnabled(status);
        byteBased.setEnabled(status);
        packetBased.setEnabled(status);
        timeBased.setEnabled(status);
        flowBased.setEnabled(status);
        sourcePort.setEnabled(status);
        destinationPort.setEnabled(status);
        protocol.setEnabled(status);
        totalNumberOfPackets.setEnabled(status);
        totalNumberOfBytes.setEnabled(status);
        meanOfNumberOfBytesPerPacket.setEnabled(status);
        stdOfNumberOfBytesPerPacket.setEnabled(status);
        numberOfPacketsPerSecond.setEnabled(status);
        numberOfBytesPerSecond.setEnabled(status);
        flowDuration.setEnabled(status);
        meanOfIAT.setEnabled(status);
        stdOfIAT.setEnabled(status);
        ratioOfNumberOfPacketsOI.setEnabled(status);
        ratioOfNumberOfBytesOI.setEnabled(status);
        ratioOfIATOI.setEnabled(status);

        forwardPacketsPerSecond.setEnabled(status);
        totalForwardPackets.setEnabled(status);
        forwardPacketLengthMax.setEnabled(status);
        activeMean.setEnabled(status);
        backwardPacketsPerSecond.setEnabled(status);
        forwardIATStd.setEnabled(status);
        maxPacketLength.setEnabled(status);
        totalBackwardPackets.setEnabled(status);
        totalLengthOfBackwardPackets.setEnabled(status);
        backwardIATStd.setEnabled(status);
        finFlagCount.setEnabled(status);
        packetLengthVariance.setEnabled(status);
    }//GEN-LAST:event_AllActionPerformed

    private void totalNumberOfBytesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalNumberOfBytesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalNumberOfBytesActionPerformed

    private void meanOfNumberOfBytesPerPacketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanOfNumberOfBytesPerPacketActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_meanOfNumberOfBytesPerPacketActionPerformed

    private void stdOfNumberOfBytesPerPacketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stdOfNumberOfBytesPerPacketActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stdOfNumberOfBytesPerPacketActionPerformed

    private void numberOfBytesPerSecondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfBytesPerSecondActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberOfBytesPerSecondActionPerformed

    private void numberOfPacketsPerSecondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfPacketsPerSecondActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberOfPacketsPerSecondActionPerformed

    private void ratioOfIATOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratioOfIATOIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ratioOfIATOIActionPerformed

    private void ratioOfNumberOfBytesOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratioOfNumberOfBytesOIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ratioOfNumberOfBytesOIActionPerformed

    private void stdOfIATActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stdOfIATActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stdOfIATActionPerformed

    private void meanOfIATActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanOfIATActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_meanOfIATActionPerformed

    private void ratioOfNumberOfPacketsOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratioOfNumberOfPacketsOIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ratioOfNumberOfPacketsOIActionPerformed

    private void forwardIATStdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardIATStdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forwardIATStdActionPerformed

    private void backwardPacketsPerSecondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardPacketsPerSecondActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backwardPacketsPerSecondActionPerformed

    private void packetLengthVarianceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packetLengthVarianceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_packetLengthVarianceActionPerformed

    private void finFlagCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finFlagCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finFlagCountActionPerformed

    private void totalLengthOfBackwardPacketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalLengthOfBackwardPacketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalLengthOfBackwardPacketsActionPerformed

    private void totalBackwardPacketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalBackwardPacketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalBackwardPacketsActionPerformed

    private void backwardIATStdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardIATStdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backwardIATStdActionPerformed

    private void forwardPacketLengthMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardPacketLengthMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forwardPacketLengthMaxActionPerformed

    private void totalForwardPacketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalForwardPacketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalForwardPacketsActionPerformed

    private void activeMeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeMeanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_activeMeanActionPerformed

    private void learningRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learningRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_learningRateActionPerformed

    private void fileTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTrainActionPerformed
        JFileChooser choose = new JFileChooser();
        int choice = choose.showOpenDialog(fileTrain);
        if (choice != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File chosenFile = choose.getSelectedFile();
        trainPath.setText(chosenFile.getPath());
    }//GEN-LAST:event_fileTrainActionPerformed

    private void fileTestingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTestingActionPerformed
        JFileChooser choose = new JFileChooser();
        int choice = choose.showOpenDialog(fileTrain);
        if (choice != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File chosenFile = choose.getSelectedFile();
        testPath.setText(chosenFile.getPath());
    }//GEN-LAST:event_fileTestingActionPerformed

    private void epochActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epochActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_epochActionPerformed

    private void literaturActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_literaturActionPerformed
        boolean status = literatur.isSelected();

        sourcePort.setSelected(status);
        destinationPort.setSelected(status);
        protocol.setSelected(status);
        totalNumberOfPackets.setSelected(status);
        totalNumberOfBytes.setSelected(status);
        meanOfNumberOfBytesPerPacket.setSelected(status);
        stdOfNumberOfBytesPerPacket.setSelected(status);
        numberOfPacketsPerSecond.setSelected(status);
        numberOfBytesPerSecond.setSelected(status);
        flowDuration.setSelected(status);
        meanOfIAT.setSelected(status);
        stdOfIAT.setSelected(status);
        ratioOfNumberOfPacketsOI.setSelected(status);
        ratioOfNumberOfBytesOI.setSelected(status);
        ratioOfIATOI.setSelected(status);
    }//GEN-LAST:event_literaturActionPerformed

    private void byteBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byteBasedActionPerformed
        boolean status = byteBased.isSelected();

        forwardPacketLengthMax.setSelected(status);
        totalLengthOfBackwardPackets.setSelected(status);
        packetLengthVariance.setSelected(status);

        totalNumberOfBytes.setSelected(status);
        meanOfNumberOfBytesPerPacket.setSelected(status);
        stdOfNumberOfBytesPerPacket.setSelected(status);
        numberOfBytesPerSecond.setSelected(status);
        ratioOfNumberOfBytesOI.setSelected(status);
    }//GEN-LAST:event_byteBasedActionPerformed

    private void packetBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packetBasedActionPerformed
        boolean status = packetBased.isSelected();

        forwardPacketsPerSecond.setSelected(status);
        totalForwardPackets.setSelected(status);
        backwardPacketsPerSecond.setSelected(status);
        maxPacketLength.setSelected(status);
        totalBackwardPackets.setSelected(status);

        totalNumberOfPackets.setSelected(status);
        numberOfPacketsPerSecond.setSelected(status);
        ratioOfNumberOfPacketsOI.setSelected(status);
    }//GEN-LAST:event_packetBasedActionPerformed

    private void timeBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeBasedActionPerformed
        boolean status = timeBased.isSelected();

        activeMean.setSelected(status);
        forwardIATStd.setSelected(status);
        backwardIATStd.setSelected(status);

        meanOfIAT.setSelected(status);
        stdOfIAT.setSelected(status);
        ratioOfIATOI.setSelected(status);
    }//GEN-LAST:event_timeBasedActionPerformed

    private void flowBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flowBasedActionPerformed
        boolean status = flowBased.isSelected();

        finFlagCount.setSelected(status);
        flowDuration.setSelected(status);
    }//GEN-LAST:event_flowBasedActionPerformed

    private void staticBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staticBasedActionPerformed
        boolean status = staticBased.isSelected();

        sourcePort.setSelected(status);
        destinationPort.setSelected(status);
        protocol.setSelected(status);
    }//GEN-LAST:event_staticBasedActionPerformed

    private void penelitiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_penelitiActionPerformed
        boolean status = peneliti.isSelected();

        forwardPacketLengthMax.setSelected(status);
        totalLengthOfBackwardPackets.setSelected(status);
        packetLengthVariance.setSelected(status);
        forwardPacketsPerSecond.setSelected(status);
        totalForwardPackets.setSelected(status);
        backwardPacketsPerSecond.setSelected(status);
        maxPacketLength.setSelected(status);
        totalBackwardPackets.setSelected(status);
        activeMean.setSelected(status);
        forwardIATStd.setSelected(status);
        backwardIATStd.setSelected(status);
        finFlagCount.setSelected(status);
    }//GEN-LAST:event_penelitiActionPerformed

    private Boolean[] getStatusFeatures() {
        ArrayList<Boolean> status = new ArrayList<>();

        status.add(sourcePort.isSelected());
        status.add(destinationPort.isSelected());
        status.add(protocol.isSelected());
        status.add(totalNumberOfPackets.isSelected());
        status.add(totalNumberOfBytes.isSelected());
        status.add(meanOfNumberOfBytesPerPacket.isSelected());
        status.add(stdOfNumberOfBytesPerPacket.isSelected());
        status.add(numberOfPacketsPerSecond.isSelected());
        status.add(numberOfBytesPerSecond.isSelected());
        status.add(flowDuration.isSelected());
        status.add(meanOfIAT.isSelected());
        status.add(stdOfIAT.isSelected());
        status.add(ratioOfNumberOfPacketsOI.isSelected());
        status.add(ratioOfNumberOfBytesOI.isSelected());
        status.add(ratioOfIATOI.isSelected());
        status.add(forwardPacketLengthMax.isSelected());
        status.add(totalLengthOfBackwardPackets.isSelected());
        status.add(packetLengthVariance.isSelected());
        status.add(forwardPacketsPerSecond.isSelected());
        status.add(totalForwardPackets.isSelected());
        status.add(backwardPacketsPerSecond.isSelected());
        status.add(maxPacketLength.isSelected());
        status.add(totalBackwardPackets.isSelected());
        status.add(activeMean.isSelected());
        status.add(forwardIATStd.isSelected());
        status.add(backwardIATStd.isSelected());
        status.add(finFlagCount.isSelected());

        return status.toArray(new Boolean[status.size()]);
    }

    private void trainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainActionPerformed
        //parameter neural network
        InputView inputView = new InputView();
//        String pathTrain = trainPath.getText();
        String pathTrain = "D:\\StupidYou\\Course\\TA\\Datasets\\PCATraining.csv" ;
        String pathTest = testPath.getText();
        String type = "other";
        if (All.isSelected()) {
            type = "All";
        }
        try {
            driver.setTrainingData(driver.getData(pathTrain, type, inputView.getStatusFeatures())); //train
//            driver.setTestingData(driver.getData(pathTest, type, inputView.getStatusFeatures())); //test
            NeuralNetwork.setLEARNING_RATE(Double.parseDouble(learningRate.getText()));
            NeuralNetwork.setNumbOfHiddenNeurons(Integer.parseInt(hiddenNeurons.getSelectedItem().toString()));
            driver.setNumberOfEpoch(Integer.parseInt(epoch.getText()));
            driver.neuralNetwork = new NeuralNetwork();
            driver.train(folderName.getText());
        } catch (IOException ex) {
            Logger.getLogger(InputView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_trainActionPerformed

    private void hiddenNeuronsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hiddenNeuronsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hiddenNeuronsActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputView().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton All;
    private javax.swing.JCheckBox activeMean;
    private javax.swing.JCheckBox backwardIATStd;
    private javax.swing.JCheckBox backwardPacketsPerSecond;
    private javax.swing.JRadioButton byteBased;
    private javax.swing.JCheckBox destinationPort;
    private javax.swing.JTextField epoch;
    private javax.swing.JButton fileTesting;
    private javax.swing.JButton fileTrain;
    private javax.swing.JCheckBox finFlagCount;
    private javax.swing.JLabel fiturLiteratur;
    private javax.swing.JLabel fiturPeneliti;
    private javax.swing.JRadioButton flowBased;
    private javax.swing.JCheckBox flowDuration;
    private javax.swing.JTextField folderName;
    private javax.swing.JCheckBox forwardIATStd;
    private javax.swing.JCheckBox forwardPacketLengthMax;
    private javax.swing.JCheckBox forwardPacketsPerSecond;
    private javax.swing.JComboBox<String> hiddenNeurons;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labelEpoch;
    private javax.swing.JLabel labelFolderName;
    private javax.swing.JLabel labelPath;
    private javax.swing.JLabel labelTesting;
    private javax.swing.JTextField learningRate;
    private javax.swing.JRadioButton literatur;
    private javax.swing.JCheckBox maxPacketLength;
    private javax.swing.JCheckBox meanOfIAT;
    private javax.swing.JCheckBox meanOfNumberOfBytesPerPacket;
    private javax.swing.JCheckBox numberOfBytesPerSecond;
    private javax.swing.JCheckBox numberOfPacketsPerSecond;
    private javax.swing.JRadioButton packetBased;
    private javax.swing.JCheckBox packetLengthVariance;
    private javax.swing.JRadioButton peneliti;
    private javax.swing.JCheckBox protocol;
    private javax.swing.JCheckBox ratioOfIATOI;
    private javax.swing.JCheckBox ratioOfNumberOfBytesOI;
    private javax.swing.JCheckBox ratioOfNumberOfPacketsOI;
    private javax.swing.JCheckBox sourcePort;
    private javax.swing.JRadioButton staticBased;
    private javax.swing.JCheckBox stdOfIAT;
    private javax.swing.JCheckBox stdOfNumberOfBytesPerPacket;
    private javax.swing.JButton test;
    private javax.swing.JLabel testPath;
    private javax.swing.JRadioButton timeBased;
    private javax.swing.JCheckBox totalBackwardPackets;
    private javax.swing.JCheckBox totalForwardPackets;
    private javax.swing.JCheckBox totalLengthOfBackwardPackets;
    private javax.swing.JCheckBox totalNumberOfBytes;
    private javax.swing.JCheckBox totalNumberOfPackets;
    private javax.swing.JButton train;
    private javax.swing.JLabel trainPath;
    // End of variables declaration//GEN-END:variables
}
